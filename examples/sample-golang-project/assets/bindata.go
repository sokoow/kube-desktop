// Code generated by go-bindata.
// sources:
// static/navigation_bar.css
// static/style.css
// static/third_view.css
// templates/index.html
// templates/navigation_bar.html
// templates/second_view.html
// templates/third_view.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticNavigation_barCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func staticNavigation_barCssBytes() ([]byte, error) {
	return bindataRead(
		_staticNavigation_barCss,
		"static/navigation_bar.css",
	)
}

func staticNavigation_barCss() (*asset, error) {
	bytes, err := staticNavigation_barCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/navigation_bar.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(1574456707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x30\xd4\x51\xc8\x30\xd2\x51\xc8\x30\xd6\x51\xc8\x30\xd1\x51\xc8\x30\x55\xa8\xe6\x52\x50\x50\x50\x28\x49\xad\x28\xd1\x4d\xcc\xc9\x4c\xcf\xb3\x52\x48\x4e\xcd\x2b\x49\x2d\xb2\xe6\xaa\x05\x04\x00\x00\xff\xff\xdb\x5a\x8f\x42\x2e\x00\x00\x00")

func staticStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticStyleCss,
		"static/style.css",
	)
}

func staticStyleCss() (*asset, error) {
	bytes, err := staticStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/style.css", size: 46, mode: os.FileMode(420), modTime: time.Unix(1574456707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticThird_viewCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x2b\x4a\x2d\x2e\xcd\x29\xd1\x4d\xca\xaf\x50\xa8\xe6\x52\x50\x50\x50\xc8\x4d\x2c\x4a\xcf\xcc\xd3\x2d\xc9\x2f\xb0\x52\x30\x35\x28\xa8\xb0\xe6\xaa\xe5\xe2\x82\x29\x2b\xcd\x4b\x49\x2d\xca\xc9\xcc\x4b\x4d\x81\xaa\x2e\x49\xad\x28\xd1\x4d\x49\x4d\xce\x2f\x4a\x2c\xc9\xcc\xcf\xb3\x52\x80\xab\xb0\xe6\xaa\x05\x04\x00\x00\xff\xff\x72\x15\x29\xe9\x5d\x00\x00\x00")

func staticThird_viewCssBytes() ([]byte, error) {
	return bindataRead(
		_staticThird_viewCss,
		"static/third_view.css",
	)
}

func staticThird_viewCss() (*asset, error) {
	bytes, err := staticThird_viewCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/third_view.css", size: 93, mode: os.FileMode(420), modTime: time.Unix(1574456707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x5b\x6f\xe2\x38\x14\xc7\xdf\xf9\x14\x6e\x5e\xdb\xc4\x50\x28\x9d\xae\x92\x4a\xdc\x6f\x25\x9d\x36\xb4\x0b\x7d\x59\x39\x8e\x43\x1c\x1c\xdb\xd8\x26\x5c\x46\xf3\xdd\x57\x84\xa5\xd0\xd1\xcc\xa8\xab\xc9\x4b\x7c\xce\x71\xfe\xe7\xfc\xad\x9f\xe3\x5e\xb4\x1f\x5b\x93\xd9\xd7\x0e\x48\x4c\xc6\xee\x4b\xee\xfe\x05\x18\xe2\x73\xcf\x22\xdc\xba\x2f\x01\x00\x80\x9b\x10\x14\x1d\x96\x45\x78\x61\xdb\xe0\x99\x2c\x57\x54\x91\x08\x64\xc4\x20\x60\xd0\x5c\x03\xdb\x3e\xdb\x53\xa4\x71\x82\x94\x26\xc6\xb3\x56\x26\xb6\xbf\x58\x3f\x96\x39\xca\x88\x67\xe5\x94\xac\xa5\x50\xc6\x02\x58\x70\x43\xb8\xf1\xac\x35\x8d\x4c\xe2\x45\x24\xa7\x98\xd8\x45\x70\x05\x28\xa7\x86\x22\x66\x6b\x8c\x18\xf1\x2a\x57\x40\x27\x8a\xf2\x85\x6d\x84\x1d\x53\xe3\x71\x71\x2e\x6f\xa8\x61\xe4\xbe\x27\xf6\x46\x40\x7f\x32\x7e\x00\x01\x51\x39\x51\x2e\x3c\x54\x4a\x1f\xcd\x34\x85\x30\xda\x28\x24\x41\x2b\x08\x3e\xfa\x60\x94\x2f\x80\x22\xcc\xb3\xb4\xd9\x32\xa2\x13\x42\x8c\x05\x12\x45\x62\xcf\x4a\x8c\x91\xfa\x2f\x08\x33\xb4\xc1\x11\x77\xc2\xa3\xca\x3e\xc0\x22\x83\xef\x09\x58\x73\xca\x4e\xd9\x0e\x89\x41\x10\x6b\x7d\x2a\x38\x19\xe5\x0e\xd6\xda\x02\x94\x1b\x32\x57\xd4\x6c\x3d\x4b\x27\xa8\xfa\xa5\x66\xc3\x59\x5d\xb6\xeb\xdd\x57\xf8\x9a\x5f\xf7\x87\xbc\x51\x37\x97\xb9\x66\x2f\xf5\x78\x3d\x9b\xa6\xad\xae\xc1\x1d\xd9\x0f\xfd\x61\x99\x6d\x1b\x5d\x3d\x9d\xe8\xb4\x19\xc6\xa8\x9d\xee\x1a\x0f\xe4\x49\xfb\xf5\xb1\x05\xb0\x12\x5a\x0b\x45\xe7\x94\x7b\x16\xe2\x82\x6f\x33\xb1\xd2\xd6\xb9\xfb\xdf\xd9\x83\xda\x20\x43\x31\x2c\x2a\xc5\x94\x9f\x3c\x97\xe3\x87\x1c\xe5\x74\x8e\x0c\x15\xfc\x9f\x10\xa9\x33\x05\x17\x9e\x88\x72\x43\x11\x6d\xcf\x84\x23\x9a\x03\xcc\x90\xd6\x9e\xb5\xe7\x01\x51\x4e\xd4\x59\xe3\xfd\xf3\xed\x9b\xe3\xbf\x4b\x37\x91\xfa\xfe\xbd\xf4\xa1\xee\x26\x95\xfb\x3e\x61\x4c\x5c\x81\xbf\x85\x62\xd1\x85\x0b\x93\xca\x59\x0b\x18\xd1\xfc\x38\xc8\xa1\x7b\xe9\x1d\x85\x47\xb9\x17\x45\x0c\x0c\x51\x8e\x02\xac\xa8\x34\xef\x40\x14\x1b\xd2\xa7\x15\x51\x5b\x10\x53\xa5\xcd\x15\x30\x09\xe1\xe0\xab\x90\x92\x28\x27\xd5\xff\xc5\x27\x9c\x86\x27\x9a\x5c\x7d\x10\xd3\x0a\x9f\xc8\xc1\x22\x22\x4e\xba\xdc\x2b\x16\xc4\x1c\x96\x76\xd5\xb9\x76\x2a\x8e\x66\x34\x2b\x00\x49\x7f\xca\xc7\x68\x58\x15\xd7\xed\x91\x19\x2c\xf2\xd9\x60\x54\x7d\xe9\xf8\xbb\x6c\x7c\x3b\x6a\x2d\x9e\x15\x54\x9d\x3b\xf8\x24\xe7\x75\xd4\x78\xeb\x0d\xd7\xdd\xf6\xf8\xd5\x6f\xc0\x9e\xec\x75\xbb\x77\xd5\x64\x2a\x7b\x37\xa3\x85\xff\x6b\x3e\x5c\x78\x98\xf5\x77\x83\x47\x3c\xd5\x0e\x66\x62\x15\xc5\x0c\x29\x52\x4c\x8f\x52\xb4\x81\x8c\x86\x1a\xca\xe3\x89\xc0\x8a\x53\xa9\x38\x65\xb8\xca\xa2\x63\xf2\xd7\x8e\x42\xf8\x52\xdf\x4a\xda\xec\xf4\xe5\x63\x0c\x6b\x97\x15\xbe\xeb\x4a\x75\x53\xe5\x9b\x20\xb8\xec\x3d\xb4\x16\xf1\xba\x19\x75\xfd\xc9\xc6\x60\xb6\x5c\x12\x3e\x08\xe2\x75\x63\x27\x47\x68\xec\x77\xfd\x2c\xad\xfd\x91\xa3\xff\x75\x89\xd3\x1f\xef\xf0\xcf\x0d\x25\xe5\x46\x48\xa7\x38\xa9\xbd\xb5\xc5\xad\x91\x77\xc9\xe8\xad\x36\xd1\xfd\x90\x96\x6b\xb7\xbe\x1a\xf5\x1e\x1e\xab\x41\x67\xd8\x98\xd7\x6e\xd2\xe9\x86\xf7\x06\xf1\x6c\xb7\xa8\x05\xf4\xae\xfc\xdc\x1e\x2c\xfd\xac\xf2\x19\x43\x2e\x2c\xfe\xdc\xff\x06\x00\x00\xff\xff\x3c\x40\xc1\x33\xc9\x05\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1481, mode: os.FileMode(420), modTime: time.Unix(1574456707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNavigation_barHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xb1\x6e\xec\x20\x10\x45\x7b\x7f\xc5\xbc\xe9\x11\x7a\x3d\xa6\xd8\x2a\xd5\x36\xc9\x0f\x8c\x6d\xd6\x9e\x04\x0f\x11\x60\xa4\xfc\x7d\x04\x5e\x6d\x9c\x2d\x36\x45\x52\xdd\x91\xe6\xdc\x39\x48\x98\x7f\x4a\xc1\x99\x0a\xcf\x94\x39\x08\x9c\x28\x82\x52\xb6\x33\x42\x05\x46\x4f\x29\xf5\x28\x54\x06\x8a\xb0\x87\xf2\x3c\x2f\x19\x86\x79\x1f\xd0\x76\x00\x00\x66\xe2\x1b\x3e\x06\xc9\xc4\xe2\xe2\x75\xd7\xf6\xe9\x9d\xe4\xfb\x3d\x35\x44\x92\x09\xed\xa9\x86\xd1\x15\xb0\xdd\x57\x61\xf3\x07\x1c\x5e\xb7\x94\xf9\xf2\xa1\xea\x6d\x27\x59\xb9\xda\xbc\xc1\xad\xe0\xf9\x50\x50\x9c\xdd\x7a\x47\x34\x8a\x80\xa7\x1e\x97\xb0\xba\x33\x15\x3c\x36\x3c\xcb\x1b\xc2\x12\xdd\xa5\x47\x8d\xf6\x29\xac\xce\x68\xba\x93\x68\xcf\xbf\xd0\x26\x37\x06\x99\x1e\x8a\x77\x04\xed\x73\xcb\xbf\x7e\x40\x5e\x38\x3e\xf6\x37\x42\xff\x47\xfb\x52\x87\x1f\xfc\x46\x6f\xfe\xfa\xff\x7a\xe2\x62\x3b\xa3\x85\x8a\xfd\x0c\x00\x00\xff\xff\x19\xfb\x9b\x02\x54\x02\x00\x00")

func templatesNavigation_barHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesNavigation_barHtml,
		"templates/navigation_bar.html",
	)
}

func templatesNavigation_barHtml() (*asset, error) {
	bytes, err := templatesNavigation_barHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/navigation_bar.html", size: 596, mode: os.FileMode(420), modTime: time.Unix(1574456707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSecond_viewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x5b\x6f\xa3\x38\x1c\xc5\xdf\xfb\x29\x3c\xbc\xb6\xe0\xdc\x9a\x4e\x57\x10\x29\xf7\x5b\x43\xa7\x25\xad\x92\xbe\xac\x8c\x31\xb1\x09\xd8\x8e\xed\x90\xcb\x68\xbe\xfb\x2a\x64\xd3\xa4\xd5\xcc\x68\x56\xcb\x0b\xfe\xfb\x6f\x8e\xcf\xb1\x7e\xc6\xfd\xd2\x79\x6c\x4f\xe7\xdf\xba\x80\x9a\x2c\x6d\x5c\xb9\x87\x17\x48\x11\x5f\x78\x16\xe1\x56\xe3\x0a\x00\x00\x5c\x4a\x50\x74\x1c\x16\xe5\x17\xdb\x06\xcf\x64\xb5\x66\x8a\x44\x20\x23\x06\x01\x83\x16\x1a\xd8\xf6\xc5\x9a\x62\x1a\x53\xa4\x34\x31\x9e\xb5\x36\xb1\xfd\xd5\xfa\xdc\xe6\x28\x23\x9e\x95\x33\xb2\x91\x42\x19\x0b\x60\xc1\x0d\xe1\xc6\xb3\x36\x2c\x32\xd4\x8b\x48\xce\x30\xb1\x8b\xe2\x06\x30\xce\x0c\x43\xa9\xad\x31\x4a\x89\x57\xbe\x01\x9a\x2a\xc6\x97\xb6\x11\x76\xcc\x8c\xc7\xc5\xa5\xbc\x61\x26\x25\x8d\xbe\x38\x04\x01\x83\xe9\xe4\x01\x04\x44\xe5\x44\xb9\xf0\xd8\xb9\xfa\x18\xa6\x25\x84\xd1\x46\x21\x09\xda\x41\xf0\x31\x47\xca\xf8\x12\x28\x92\x7a\x96\x36\xbb\x94\x68\x4a\x88\xb1\x00\x55\x24\xf6\x2c\x6a\x8c\xd4\x7f\x41\x98\xa1\x2d\x8e\xb8\x13\x9e\x54\x0e\x05\x16\x19\x7c\x9f\x80\x35\xa7\xe4\x94\xec\x90\x18\x04\xb1\xd6\xe7\x86\x93\x31\xee\x60\xad\x2d\xc0\xb8\x21\x0b\xc5\xcc\xce\xb3\x34\x45\xd5\xaf\x35\x1b\xce\xeb\xb2\x53\xef\xbd\xc2\xd7\xbc\x32\x18\xf1\x66\xdd\x5c\xe7\x3a\x7d\xa9\xc7\x9b\xf9\x2c\x69\xf7\x0c\xee\xca\x41\xe8\x8f\x4a\xe9\xae\xd9\xd3\xb3\xa9\x4e\x5a\x61\x8c\x3a\xc9\xbe\xf9\x40\x9e\xb4\x5f\x9f\x58\x00\x2b\xa1\xb5\x50\x6c\xc1\xb8\x67\x21\x2e\xf8\x2e\x13\x6b\x6d\x5d\xa6\xff\x5d\x3c\xa8\x0d\x32\x0c\xc3\xa2\x53\xb8\xfc\xc3\x73\x39\x7d\xc8\x51\xce\x16\xc8\x30\xc1\xff\x0e\x91\xba\x50\x70\xe1\x99\x28\x37\x14\xd1\xee\x42\x38\x62\x39\xc0\x29\xd2\xda\xb3\x0e\x3c\x20\xc6\x89\xba\xd8\xf8\xf0\x7c\xff\xee\xf8\xef\xd2\x2d\xa4\x7e\xfc\xb8\xfa\xd0\x77\x69\xb9\xd1\xe4\xc2\x50\xa2\xc0\x2b\x23\x1b\x17\xd2\x72\xe3\xd3\x8a\x4a\xc3\x06\xed\x23\x6f\xa0\x2f\x88\x06\x03\xa2\x08\xb0\x5d\x48\x2b\x17\x66\x60\xc4\xf2\x93\xe5\xa3\xcf\xab\x77\x68\x1e\xe5\x61\x7b\x94\x82\x11\xca\x51\x80\x15\x93\xe6\x1d\x9d\x62\x41\xf2\xb4\x26\x6a\x07\x62\xa6\xb4\xb9\x01\x86\x12\x0e\xbe\x09\x29\x89\x72\x12\xfd\x6f\x7d\x06\x6f\x74\xe6\xce\xd5\x47\x31\xad\xf0\x99\x31\x2c\x22\xe2\x24\xab\x83\x62\xc1\xd6\x71\x68\x57\x9d\x8a\x53\x76\x74\xca\xb2\x02\xa5\xe4\xa7\x24\x8d\x47\x55\x51\xe9\x8c\xcd\x70\x99\xcf\x87\xe3\xea\x4b\xd7\xdf\x67\x93\xbb\x71\x7b\xf9\xac\xa0\xea\xde\xc3\x27\xb9\xa8\xa3\xe6\x5b\x7f\xb4\xe9\x75\x26\xaf\x7e\x13\xf6\x65\xbf\xd7\xbb\xaf\xd2\x99\xec\xdf\x8e\x97\xfe\xaf\x49\x72\xe1\xd1\xeb\xef\x8c\x47\x3c\xd1\x0e\x4e\xc5\x3a\x8a\x53\xa4\x48\xe1\x1e\x25\x68\x0b\x53\x16\x6a\x28\x4f\x27\x02\xcb\x4e\xb9\xec\x94\xe0\x3a\x8b\x4e\x93\xbf\x4e\x14\xc2\x97\xfa\x4e\xb2\x56\x77\x20\x1f\x63\x58\xbb\x2e\xf3\x7d\x4f\xaa\xdb\x2a\xdf\x06\xc1\x75\xff\xa1\xbd\x8c\x37\xad\xa8\xe7\x4f\xb7\x06\xa7\xab\x15\xe1\xc3\x20\xde\x34\xf7\x72\x8c\x26\x7e\xcf\xcf\x92\xda\xff\x4a\xf4\x9f\xae\x7b\xf2\xf9\xb6\xff\x3c\x10\x2d\x35\x43\x36\xc3\xb4\xf6\xd6\x11\x77\x46\xde\xd3\xf1\x5b\x6d\xaa\x07\x21\x2b\xd5\xee\x7c\x35\xee\x3f\x3c\x56\x83\xee\xa8\xb9\xa8\xdd\x26\xb3\x2d\xef\x0f\xe3\xf9\x7e\x59\x0b\xd8\x7d\xe9\xb9\x33\x5c\xf9\x59\xf9\x4f\x02\xb9\xb0\xf8\xc7\xff\x13\x00\x00\xff\xff\xd4\x16\x0b\xbc\xf3\x05\x00\x00")

func templatesSecond_viewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSecond_viewHtml,
		"templates/second_view.html",
	)
}

func templatesSecond_viewHtml() (*asset, error) {
	bytes, err := templatesSecond_viewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/second_view.html", size: 1523, mode: os.FileMode(420), modTime: time.Unix(1574456707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesThird_viewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5f\x73\xda\xba\x13\x7d\xcf\xa7\xd8\xfa\xe5\xf7\xd0\xda\x82\x40\x69\xd3\xb1\x99\x21\xe1\x4f\x02\x89\xd3\x06\xda\x49\xfa\xd2\x91\xad\x35\x96\xb1\x25\x47\x12\x06\x92\x5f\xbe\xfb\x1d\xdb\x97\x42\xe8\x9f\x9b\xdb\xcb\x0b\x5e\xed\xea\xec\x39\xf2\xce\x91\xdd\x57\xfd\xeb\xb3\xd9\xdd\xc7\x01\xc4\x26\x4b\xbb\x47\x6e\xf9\x07\x29\x15\x73\xcf\x42\x61\x75\x8f\x00\x00\xdc\x18\x29\xab\x1f\xab\xf0\x95\x6d\xc3\x0d\xde\x2f\xb9\x42\x06\x19\x1a\x0a\x86\xce\x35\xd8\xf6\x5e\x4d\xb5\x1c\xc6\x54\x69\x34\x9e\xb5\x34\x91\xfd\xde\x3a\x4c\x0b\x9a\xa1\x67\x15\x1c\x57\xb9\x54\xc6\x82\x50\x0a\x83\xc2\x78\xd6\x8a\x33\x13\x7b\x0c\x0b\x1e\xa2\x5d\x05\x6f\x80\x0b\x6e\x38\x4d\x6d\x1d\xd2\x14\xbd\xe6\x1b\xd0\xb1\xe2\x62\x61\x1b\x69\x47\xdc\x78\x42\xee\xc3\x1b\x6e\x52\xec\x8e\x64\x29\x04\xce\x67\x57\x97\x30\x45\x55\xa0\x72\x49\x9d\x39\x7a\x2e\xe6\x54\x4a\xa3\x8d\xa2\x39\x9c\x4d\xa7\xcf\x75\xa4\x5c\x2c\x40\x61\xea\x59\xda\x6c\x52\xd4\x31\xa2\xb1\x20\x56\x18\x79\x56\x6c\x4c\xae\x3f\x10\x92\xd1\x75\xc8\x84\x13\x6c\x51\xca\x20\x94\x19\xf9\xbe\x40\xda\x4e\xc3\x69\xd8\x01\x1a\x4a\x42\xad\x77\x09\x27\xe3\xc2\x09\xb5\xb6\x80\x0b\x83\x73\xc5\xcd\xc6\xb3\x74\x4c\x5b\xef\xdb\x36\xb9\xeb\xe4\xfd\xce\xf0\x0b\xf9\x52\x1c\x9f\x8f\x45\xaf\x63\x5e\x17\x3a\xfd\xdc\x89\x56\x77\xb7\xc9\xd9\xd0\x84\x83\xfc\x3c\xf0\xc7\x8d\x74\xd3\x1b\xea\xdb\x99\x4e\x4e\x83\x88\xf6\x93\x87\xde\x25\x7e\xd2\x7e\xe7\xca\x82\x50\x49\xad\xa5\xe2\x73\x2e\x3c\x8b\x0a\x29\x36\x99\x5c\x6a\x6b\x5f\xfd\xef\xe4\x11\x6d\xa8\xe1\x21\xa9\x32\x15\xcb\x17\x9e\xcb\x76\xa3\xa0\x05\x9f\x53\xc3\xa5\xf8\x16\x50\xf5\x27\x08\x26\xe6\x8a\x7d\x2b\x27\x64\x6f\xb7\x4b\x76\xf3\xe8\x06\x92\x6d\xf6\x40\x19\x2f\x20\x4c\xa9\xd6\x9e\x55\x4e\x13\xe5\x02\xd5\x5e\xd3\xf2\xf7\xf8\xe8\xf8\xdf\x89\x9d\x52\xf5\xf4\x74\xf4\x2c\xef\xc6\xcd\xee\x0d\x0a\x86\x8a\x8b\x39\xf4\xa9\xa1\x2e\x89\x9b\xdd\x83\x9a\x76\x77\x16\x73\x0d\x39\x9d\x23\x18\xba\x40\x0d\x26\xc6\xfa\x2d\xa2\x82\x9c\x6a\x8d\x0c\xb8\x00\x2a\x18\x30\x34\xa8\x32\x2e\x50\x03\x8f\x80\x1b\xe0\x1a\x24\x63\x20\x15\x60\x81\xc2\x25\x71\xfb\x00\x7e\x4f\x86\x42\xbd\x4c\x8d\x1d\xc8\xf5\x81\x8e\x5a\x0b\x8f\xc0\x99\x9a\x92\xea\xa7\x25\xaa\xcd\xd3\xd3\x0f\x35\x35\xdf\xe3\x03\xbc\x65\x29\x30\xe5\x02\x99\xd5\xbd\x93\x4b\x60\x9c\x89\xff\x19\x40\x61\x50\x01\x15\x5b\x25\x0e\x54\x32\xb9\x86\x55\x4c\x0d\xac\xa8\xae\x4b\x90\x7d\x70\x49\x7c\xfc\x23\xa3\xba\x5b\xab\xfb\xf8\xf8\x9c\x96\x4b\xe2\xd6\xcf\xf8\x63\xaa\xf1\x8f\x48\xcf\x62\x04\xb1\xcc\x02\x54\x5b\x46\xc0\xf5\x3f\x93\xf2\xab\x2d\xbf\xe2\xf3\x92\xb6\x5c\x6f\xfb\xbe\xbc\x1f\xfc\x1f\x22\xa9\x32\x6a\xae\x19\xbb\x56\x83\x02\xc5\x6f\x4e\x44\xb0\x83\x03\x71\x09\xe3\xc5\xde\x90\xef\x42\x97\xd4\xf3\x5f\x07\xa5\x95\x5d\xe7\xe5\x58\xd3\x14\xc6\xb4\xa0\xd3\x50\xf1\xdc\x7c\x37\xb4\xaa\x20\xa9\x5e\x08\x44\x5c\x69\xf3\xa6\x1c\x5a\x01\x1f\x65\x9e\xa3\x72\x12\xfd\x77\xbc\xb3\xc3\xf1\xce\x0d\x5d\x5d\x83\x69\x15\xee\x9c\x2f\x94\x0c\x9d\xe4\xbe\x44\xac\x1c\xaf\x7e\xb4\x5b\xce\xb1\xd3\x74\x74\xca\xb3\xca\xe0\x92\x9f\xfa\xdb\x64\xdc\x92\xc7\xfd\x89\xb9\x58\x14\x77\x17\x93\xd6\xe7\x81\xff\x90\x5d\xbd\x9b\x9c\x2d\x6e\x14\x51\x83\x13\xf2\x29\x9f\x77\x68\xef\xeb\x68\xbc\x1a\xf6\xaf\xbe\xf8\x3d\x32\xca\x47\xc3\xe1\x49\x2b\xbe\xcd\x47\x6f\x27\x0b\xff\xd7\xfe\xe6\x92\x9a\xeb\xef\x88\x33\x91\x68\x27\x4c\xe5\x92\x45\x29\x55\x58\xb1\xa7\x09\x5d\x93\x94\x07\x9a\xe4\xdb\x13\x21\x4d\xa7\xd9\x74\x1a\x64\x99\xb1\xed\xe2\xaf\x15\x05\xe4\x73\x67\x93\xf3\xd3\xc1\x79\x7e\x1d\x91\xf6\xeb\xa6\x78\x18\xe6\xea\x6d\x4b\xac\xa7\xd3\xd7\xa3\xcb\xb3\x45\xb4\x3a\x65\x43\x7f\xb6\x36\x61\x7a\x7f\x8f\xe2\x62\x1a\xad\x7a\x0f\xf9\x84\x5e\xf9\x43\x3f\x4b\xda\xff\x49\xd1\xbf\xba\x84\x92\xc3\x3b\xe8\xe7\x82\xe2\x46\x2f\xe0\xb7\x61\xdc\xfe\xda\x97\xef\x4c\x7e\x12\x4f\xbe\xb6\x67\xfa\x3c\xe0\x8d\xf6\x3b\x5f\x4d\x46\x97\xd7\xad\xe9\x60\xdc\x9b\xb7\xdf\x26\xb7\x6b\x31\xba\x88\xee\x1e\x16\xed\x29\x3f\x69\xdc\xf4\x2f\xee\xfd\xac\xf9\x12\x41\x2e\xa9\xbe\x3c\xfe\x0a\x00\x00\xff\xff\xf7\x07\xef\x2c\x89\x08\x00\x00")

func templatesThird_viewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesThird_viewHtml,
		"templates/third_view.html",
	)
}

func templatesThird_viewHtml() (*asset, error) {
	bytes, err := templatesThird_viewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/third_view.html", size: 2185, mode: os.FileMode(420), modTime: time.Unix(1574456707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/navigation_bar.css": staticNavigation_barCss,
	"static/style.css": staticStyleCss,
	"static/third_view.css": staticThird_viewCss,
	"templates/index.html": templatesIndexHtml,
	"templates/navigation_bar.html": templatesNavigation_barHtml,
	"templates/second_view.html": templatesSecond_viewHtml,
	"templates/third_view.html": templatesThird_viewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"navigation_bar.css": &bintree{staticNavigation_barCss, map[string]*bintree{}},
		"style.css": &bintree{staticStyleCss, map[string]*bintree{}},
		"third_view.css": &bintree{staticThird_viewCss, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"navigation_bar.html": &bintree{templatesNavigation_barHtml, map[string]*bintree{}},
		"second_view.html": &bintree{templatesSecond_viewHtml, map[string]*bintree{}},
		"third_view.html": &bintree{templatesThird_viewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

