{{- if eq .Values.mode "standalone" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "minio.fullname" . }}
  labels:
    app: {{ template "minio.name" . }}
    k8s-app: {{ .Release.Name }}
    chart: {{ template "minio.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "minio.name" . }}
      k8s-app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "minio.name" . }}
        k8s-app: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ "/bin/sh",
          "-ce",
          "cp /tmp/config.json {{ .Values.configPath }} &&
          /usr/bin/docker-entrypoint.sh minio -C {{ .Values.configPath }} server {{ .Values.mountPath }}" ]
          volumeMounts:
            - name: export
              mountPath: {{ .Values.mountPath }}
            - name: minio-server-config
              mountPath: "/tmp/config.json"
              subPath: config.json
            - name: minio-config-dir
              mountPath: {{ .Values.configPath }}
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{ else }}{{ template "minio.fullname" . }}{{ end }}
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{ else }}{{ template "minio.fullname" . }}{{ end }}
                  key: secretkey
            {{- if .Values.minioConfig.browser }}
            - name: MINIO_BROWSER
              value: {{ .Values.minioConfig.browser | quote }}
            {{- end }}
            {{- if .Values.minioConfig.domain }}
            - name: MINIO_DOMAIN
              value: {{ .Values.minioConfig.domain | quote }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: service
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: service
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
        - name: export
          hostPath:
           path: /home/USER/.kube-volumes/minio
        - name: minio-server-config
          configMap:
            name: {{ template "minio.fullname" . }}
        - name: minio-user
          secret:
            secretName: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{ else }}{{ template "minio.fullname" . }}{{ end }}
        - name: minio-config-dir
          emptyDir: {}
{{- end }}
